#!/usr/bin/env perl

use strict;
use warnings;
use feature 'say';
use JSON::PP ();


# OpenSSL 3.x: https://docs.openssl.org/master/man1/openssl-list/#synopsis
# LibreSSL (the version bundled with macOS): https://man.openbsd.org/openssl.1
my $has_openssl_list = `openssl version` =~ /^OpenSSL 3/;

sub cmd_openssl_list
{
    my $cat = shift;
    if ($has_openssl_list) {
	('openssl', 'list', '-1', "-$cat")
    } else {
	('openssl', "list-$cat")
    }
}

sub read_openssl_list
{
    my $cat = shift;
    open my $f, '-|', cmd_openssl_list("$cat-algorithms") or die $!;
    my %alg;
    while (<$f>) {
	next if / => / || /^(?:Legacy|Provided.*):/;
	chomp;
	$_ = lc;
	s/^ *//;
	s/ @ default$//;
	if (/^\{ (.*) \}$/) {
	    my @algs = split /, /, $1;
	    $alg{$_}++ for @algs;
	} else {
	    $alg{$_}++;
	}
    }
    close $f;
    my @a = sort keys %alg;
    \@a
}


sub read_openssl_list_public_key
{
    open my $f, '-|', cmd_openssl_list('public-key-algorithms') or die $!;
    my %alg;
    while (<$f>) {
	next unless /PEM string: (.*)\n/;
	$alg{lc $1}++;
    }
    close $f;
    my @a = sort keys %alg;
    \@a
}


my %alg;

$alg{mac} = read_openssl_list($has_openssl_list ? 'mac' : 'message-digest');
$alg{cipher} = read_openssl_list('cipher');
$alg{key} = read_openssl_list_public_key();

print JSON::PP->new->pretty->encode(\%alg);
