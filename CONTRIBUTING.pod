# To read this file, run:
#    perldoc CONTRIBUTING.pod

=encoding utf8

=head1 NAME

How to contribute to C<github-keygen>?

=head1 DESCRIPTION

Patches are welcome!

They must be built against the
C<L<master|https://github.com/dolmen/github-keygen/tree/master>> branch,
then submitted as pull requests at GitHub.

The documentation is written using the
L<POD|https://perldoc.perl.org/perlpod.html> format. Use the C<perldoc> tool
to render it in a terminal:

    perldoc CONTRIBUTING.pod

=head1 INITIAL SETUP

=head2 1. Setup a Perl development environment

There are various ways to setup a Perl development environment, but here is mine
 (L<@dolmen|https://github.com/dolmen>). The key principles are:

=over 4

=item a. Do not depend on the Perl of the operating system. Instead, install a recent version which you control upgrades independently of the O/S.

=item b. Setup environment to install Perl modules from CPAN into that C<perl> using C<cpanm>.

=back


Step by step on MacOS (zsh):

=over 4

=item a. Install L<plenv|https://github.com/tokuhirom/plenv> (note: this is incompatible with I<perlbrew>)

    git clone git://github.com/tokuhirom/plenv.git ~/.plenv
    echo 'export PATH="$HOME/.plenv/bin:$PATH"' >> ~/.profile
    echo 'eval "$(plenv init -)"' >> ~/.zshrc
    exec $SHELL -l
    git clone git://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/

=item b. Install a recent perl:

    plenv install 5.40.2
    plenv global 5.40.2

=item c. Install L<cpanm|https://metacpan.org/dist/App-cpanminus/view/bin/cpanm>:

    plenv install-cpanm

=back


=head2 2. Get the source

    git clone --origin upstream git://github.com/dolmen/github-keygen.git
    cd github-keygen

=head2 3. Switch to the C<master> branch

    git checkout master

=head2 4. Install build dependencies

Not required for doc patches.

    curl -L https://cpanmin.us | perl - --installdeps --with-develop .

=head2 5. Setup a fork

=over 4

=item 5.1. L<Fork the project on GitHub|https://github.com/dolmen/github-keygen/>

=item 5.2. Link your local repo to your fork:

(You are already using C<github-keygen>, aren't you?)

    git remote add github <github-user>.github.com:<github-user>/github-keygen.git
    git remote update

=back

=head1 PATCHING, STEP BY STEP

=over 4

=item 1. Update your local fork

    git remote update --prune
    git checkout master
    git rebase upstream/master

=item 2. Update Perl dependencies (not required for doc patches)

    curl -L https://cpanmin.us | perl - --installdeps --with-develop .

=item 3. Make your fix/feature in a dedicated Git branch

    git checkout -b <my-patch> upstream/master

    $EDITOR bin/github-keygen

    # Test...
    bin/github-keygen ...

    # Run the author testsuite
    prove -v xt

=item 4. Commit

An important rule is that the commits in your branch will be added to the project
history, so you get full attribution for your contribution. So take care to have
carefully written commit message that follow the style of the existing commits.

Each commit must be an independent and fully contained change on its own.

    git commit

=item 4. Submit your work

=over 4

=item 4.1 Push!

    git push -u github <my-patch>

=item 4.2 Submit a pull request on GitHub

=item 4.3 Add more changes

You may want to add more changes, or changes may be requested by the reviewer.

Don't hesitate to edit existing commits (C<git commit --amend>) and force push
(C<git push -f>) if necessary.

=back

=item 5. Loop

Ready for another contribution? Redo from step 1!

=back

=head1 FOR RELEASE MANAGER

=over 4

=item * Bump C<$VERSION>

    git checkout master
    # Bump version number
    $EDITOR bin/github-keygen
    # Update changelog
    $EDITOR README.pod
    git add bin/github-keygen README.pod
    git commit

=item * Release

    git checkout master
    ./release.pl -n
    ./release.pl
    git push github master release
    git push github --tags

=back

=cut
