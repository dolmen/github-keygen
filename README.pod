=head1 NAME

github-keygen - bootstrap your Github SSH configuration

=head1 SYNOPSIS

Unix/Linux/MacOS X:

    git clone https://github.com/dolmen/github-keygen.git
    cd github-keygen
    ./github-keygen <my-github-username>
    cd ..
    rm -Rf github-keygen

Windows (with msysgit or Cygwin):

    git clone https://github.com/dolmen/github-keygen.git
    cd github-keygen
    github-keygen <my-github-username>
    cd ..
    rd /S /Q github-keygen

=head1 DESCRIPTION

This script makes it easy to create an initial environment setup for secure Github exchanges. More
secure that what the Github help pages recommends.

But it does much more than that:

=over 4

=item *

This tool B<automates the SSH setup>. Fewer human errors. And
a high level of security.

=item *

It creates a new SSH B<private key dedicated> to Github exchanges. This is much
better than using the same SSH key to connect to multiple hosts.
(If you loose that key, just revoke it in you Github account, remove the key
file, and re run C<github-keygen>).

=item *

As the process of creating an different SSH key for Github now becomes easy, it
is now much easier to use a different SSH key for Github on each computer
you use to publish on Github. This will help you to use the best practices in
SSH security.
(If you lose that computer or if it is compromised, just revoke the key in
your Github account: you don't have to recreate a new key on all your other
computers).

=item *

The
L<Github manual|https://help.github.com/articles/generating-ssh-keys> tells to
I<remove> your existing SSH keys. But this may not be what you want. This tool
avoids that: keep your keys and your existing SSH config; they will not be used
for Github.

=item *

It setups a B<very secure SSH configuration for Github>, independent of your
other SSH settings:

=over 4

=item *

Enable only the authentication method used with Github (publickey)

=item *

Use only the private key dedicated to Github (the IdentitiesOnly of SSH config)

=item *

Setup a dedicated F<known_hosts> file with the Github SSH hosts and enable
strict host checking (this means that if you get SSH alerts about host key
problem when connecting to GitHub, this is really a serious error and you
should check that someone is not altering your network link).

=item *

Disable bad things that could come from the Github hosts ("Trust no-one")

=back

=item *

It creates unique host aliases for github.com/gist.github.com that you'll be
able to use in Git URLs (C<git remote>) to connect to a particular account.
This gives the flexibility to use B<multiple Github accounts> (and therefore a
different SSH key for each).

    <account>.github.com:<repo-owner>/<repo>.git  (for each account)
    github.com:<repo-owner>/<repo>.git            (for the default account)

in addition to:

    git@github.com:<repo-owner>/<repo>.git

=back

This script will:

=over 4

=item *

Create a new SSH key dedicated only to your Github connections in
F<~/.ssh/id_I<E<lt>github-accountE<gt>>@github>

=item *

Create the SSH configuration optimized for Github and dedicated to Github
(does not impact your other SSH configurations) in F<~/.ssh/config>.

=item *

Install the Github SSH host authentication fingerprints in
F<~/.ssh/github_known_hosts>

=back

=head1 TRUST

As with any software that deals with the security of your computer or of communications
with other computers (operating system, antivirus, HTTPS implementation,
password storage...), you have to be able to trust it. (If you haven't ever
asked yourself that question about the software you already use, you should!)

Here are some arguments that should help you to make your choice:

=over 4

=item *

C<github-keygen> is written in a scripting language (Perl), so the code that
runs is the code in the script. You can audit it (or ask someone who you
trust to do it for you) to trust it.

=item *

When running, C<github-keygen> only generates files locally on your system. It
will not connect to your Github account (or other hosts).

=item *

C<github-keygen> only generates configuration files for OpenSSH. So:

=over 4

=item *

After running C<github-keygen>, you can (and should) audit that config to
check the changes it did to your system before connecting to any SSH hosts.

=item *

No part of that configuration is directly executable: it is just
data that OpenSSH will use.

=item *

No executable parts of C<github-keygen> will run after that (the tool itself is
not installed in your system) and you can even delete it: the configuration it
produced will still work.

=back

=item *

C<github-keygen> is very conservative in what it does to your SSH config (which
means it will not corrupt what it didn't generate itself), so don't worry about
configuration you may already have in your F<~/.ssh/config>: it will be kept as
is. (still, bugs may be present, so read the license before using the software).

=item *

I (Olivier MenguE<eacute>) am not an expert in software security. However this
list should show you that I care enough about security to have thought about many
issues, and thought to design the software to have trust in it at least as much
(in fact much more) than in other security software I use every day.

=back


I'm using the SSH configuration generated by this tool every day on multiple
computers, so you can trust that any change on Github side that may affect that
config will be immediately detected by the author and upgrades will be
made available quickly.

=head1 INSTALL

C<github-keygen> is not really the kind of software you have to install. This is
more like a wizard that you use just once. So just get the file, run it, and
delete it.

I<Windows only>: Unfortunately the version of perl bundled with msysgit (5.8) is
too old. You'll need to install perl >=5.10.1 (either
L<StrawberryPerl|http://strawberryperl.com> or Cygwin or ActivePerl).

Fetch the script from GitHub:

    git clone https://github.com/dolmen/github-keygen.git
    cd github-keygen

Unix/Linux only: install the optional C<xclip> tool (using your package
manager). It will be used to copy your public key to the X11 clipboard once
created.

=head1 UPGRADE

To upgrade your config to the latest one, update C<github-keygen> and relaunch
it. It will update your F<~/.ssh/config> and show you the diff of what it
changed (if you have installed the L<Text::Diff> perl module).

    cd github-keygen
    git pull --rebase
    ./github-keygen

=head1 HISTORY

I<Note:> As C<github-keygen> is released with Git on Github, you can simply use
the diff feature of Git/Github to view exactly what happened between two
releases. And you can also have a look to the commit log.

=over 4

=item v1.004

Changes for compatibility with msysgit's bundled perl (an antique 5.8.8
with major core modules missing: C<Pod::*>). So no changes for Unix users, but
a big improvement for all Windows+msysgit users: no need to install
StrawberryPerl just for C<github-keygen>!

=item v1.003

No changes in the github-keygen code, but the fatpacked build has been tweaked
to use a better list of packed modules. This should improve compatibility.

Documentation fixes.

=item v1.002

No functional changes, but distribution changes: branch C<master> abandoned
and replaced by C<release> (build result) and C<devel> (source).

C<github-keygen> is now L<fatpacked|https://metacpan.org/module/App::FatPacker>
from C<bin/github-keygen> in the C<devel> branch with
L<https://metacpan.org/module/Pod::Usage|Pod::Usage> and
L<https://metacpan.org/module/Text::Diff|Text::Diff>, so those modules do not
have to be installed before usage.

=item v1.001 and before

See the git log.

=back

=head1 BUGS

C<github-keygen> requires a Perl runtime. It is regularly tested in the
following environments:

=over 4

=item *

Ubuntu with perl 5.14.2

=item *

Windows with StrawberryPerl (5.12.1 and above) and msysgit

=item *

Windows with msysgit's antique perl 5.8.8.

=back

Known issues:

=over 4

=item *

on Win32, ~/.ssh/config is always written in CRLF end-of-line style. This is
not a bug, it's a feature.

=back


=head1 SUPPORT

IRC: ask C<dolmen> on C<irc.perl.org>.

Or fill an issue at Github: L<https://github.com/dolmen/github-keygen/issues>

=head1 AUTHOR

Olivier MenguE<eacute>, L<mailto:dolmen@cpan.org>.

=head1 COPYRIGHT & LICENSE

Copyright E<copy> 2012 Olivier MenguE<eacute>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut
