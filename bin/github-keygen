#!/usr/bin/env perl

use 5.008001;  # msysgit still bundles the antique 5.8.8
use strict;
use warnings;

use File::Spec;
use Cwd ();
use Getopt::Long qw(:config require_order auto_version);
use Pod::Usage;
use Sys::Hostname;

use constant HAS_TEXT_DIFF => eval { require Text::Diff; 1 };

our $VERSION = '1.401';

use constant {
    PROG => (File::Spec->splitpath($0))[2],
    CWD => Cwd::getcwd,
    # msys is the special unix emulation of Unix on Win32: perl 5.8 from msysgit
    WIN32 => $^O eq 'MSWin32' || $^O eq 'msys',
};
# We can't rely on File::HomeDir because we have to reproduce OpenSSH
# behavior, and not depend on what File::HomeDir thinks is right
use constant HOME_DIR => $ENV{HOME} || (WIN32 ? $ENV{USERPROFILE} : (getpwent)[7]);
use constant SSH_DIR => File::Spec->rel2abs('.ssh', HOME_DIR);

# 443.github.com is a pure SSH config alias to ssh.github.com
sub GITHUB_HOSTS() { qw(github.com gist.github.com ssh.github.com 443.github.com) }

$SIG{__WARN__} = sub {
    print STDERR PROG.": ", @_;
};

$SIG{__DIE__} = sub {
    my ($message, $exit_code) = @_;
    print STDERR PROG.": $message";
    exit(defined $exit_code ? $exit_code : 1);
};

sub resolve_path($)
{
    my $path = shift;
    if (WIN32) {
        $path =~ s!^(?:\~|\%d)(?=[/\\])! HOME_DIR !e;
        $path =~ s!/!\\!g if $^O ne 'msys';
    } else {
        $path =~ s!^(?:\~|\%d)(?=/)! HOME_DIR !e;
    }
    $path
}

sub ssh_file($)
{
    File::Spec->rel2abs($_[0], SSH_DIR);
}

my %compressed_paths;

sub compress_path($)
{
    my $p = shift;
    my $path = $compressed_paths{$p};
    unless (defined $path) {
        $path = File::Spec->canonpath($p);
        my $home_dir = HOME_DIR;
        my $home_dir_token = '~';
        # Avoid bug with ~ expansion on Windows ("tilde_expand: No such user \\.ssh\\...")
        # by using %d which also represents the home directory on newer OpenSSH
        # versions that support %-token expansions
        $home_dir_token = '%d' if WIN32;
        $path =~ s!^\Q$home_dir\E\b!$home_dir_token!;
        $compressed_paths{$p} = $path;
    }
    $path;
}

use constant {
    SSH_CONFIG_FILE => ssh_file('config'),
    KNOWN_HOSTS_FILE => ssh_file('known_hosts_github'),
};

my $offline; # No network connection
my $remove_all;
my $key_type = 'ed25519';
my $key_bits = 4096;
my $github_default = '';

# Parse global options
GetOptions(
    'R|reset|remove-all' => \$remove_all,
    't|key-type=s' => \$key_type,
    'b|key-bits=i' => \$key_bits,
    'offline' => \$offline,
) or pod2usage(1);

my @github_accounts;
my %github_accounts;
my %github_remove;



while (@ARGV) {
    my $user = shift @ARGV;
    pod2usage("invalid user '$user'") unless $user =~ /^([a-z0-9_-]+)(?:\@github)?$/;
    $user = $1;

    my $remove = 0;
    my %u = (
        user => $user,
        remove => \$remove,
        passphrase => undef,
        key_file => undef,
        key_type => $key_type,
        key_bits => $key_bits,
    );
    GetOptions(
        'r|remove' => \$remove,
        'd|default' => sub { $github_default = $user },
        'i|identity=s' => \$u{key_file},
        'p|passphrase=s' => \$u{passphrase},
        't|key-type=s' => \$u{key_type},
        'b|key-bits=i' => \$u{key_bits},
        'C|key-comment=s' => \$u{key_comment},
    ) or pod2usage(1);
    pod2usage("invalid empty identity file for user '$user'")
        if defined $u{key_file} && ! length $u{key_file};

    if ($remove) {
        $github_remove{$user} = 1;
    } else {
        push @github_accounts, $user;
        $github_accounts{$user} = \%u;

        # Resolve relative path
        if (defined $u{key_file} && ! File::Spec->file_name_is_absolute($u{key_file})) {
            if (-e $u{key_file}) {
                $u{key_file} = File::Spec->rel2abs($u{key_file}, CWD);
            } else {
                # If the relative path contains a volume or directory,
                # make it relative to CWD, else to SSH_DIR
                my ($v, $d, undef) = File::Spec->splitpath($u{key_file});
                $u{key_file} = File::Spec->rel2abs($u{key_file},
                   (length($v) || length($d)) ? CWD : SSH_DIR);
            }
        }
    }
}

# Load ~/.ssh/config

my @ssh_config_lines;

if (-e SSH_CONFIG_FILE) {
    my @stat = stat SSH_CONFIG_FILE;
    if ($stat[4] != $<) {
        die sprintf("%s: bad owner\n", SSH_CONFIG_FILE);
    }
    if (!WIN32 && $stat[2] & 0133) {
        die sprintf("%s: bad file permissions. Fix: chmod u-x,og-wx %s\n", SSH_CONFIG_FILE, compress_path(SSH_CONFIG_FILE));
    }

    # The :crlf layer is needed for msys
    if (open my $f, WIN32 ? '<:crlf' : '<', SSH_CONFIG_FILE) {
        @ssh_config_lines = <$f>;
        close $f;
    } else {
        warn sprintf "can't open %s\n", SSH_CONFIG_FILE;
    }
}

# Save the original content to show the diff later
my @ssh_config_lines_orig = @ssh_config_lines;


my %users;
my $in_ghkg;
my $dirty;
my $n = 0;
my @github_accounts_from_config;

# List of sections initialized with default section: "Host *"
my @sections = ([ Host => [ '*' ] ]);
my $section_start = 1; # line number of the start of current section
my $ghkg_section_pos;  # index of the last GHKG section

while ($n < @ssh_config_lines) {
    my $l = $ssh_config_lines[$n++];

    if ($l =~ m/\A\s*#.*\bgithub-keygen\b.*\bbegin\b/i) {
        if ($in_ghkg) {
            $dirty = 1;
            warn sprintf "github-keygen section error in %s at line %d\n",
                         compress_path(SSH_CONFIG_FILE), $n;
        } else {
            $in_ghkg = $n;
            $ghkg_section_pos = scalar @sections;
        }
    } elsif ($l =~ m/\A\s*#.*\bgithub-keygen\b.*\bend\b/i) {
        if ($in_ghkg) {
            undef $in_ghkg;
            $n++ while $n < @ssh_config_lines && $ssh_config_lines[$n] eq "\n";
            next;
        } else {
            $dirty = 1;
            warn sprintf "github-keygen section error in %s at line %d\n",
                         compress_path(SSH_CONFIG_FILE), $n;
        }
    } elsif ($l =~ m/\A\s*Host\s+(.*?)\s*\Z/i) {
        %users = ();
        my @hosts_patterns = split /\s+/, $1;

        unless ($in_ghkg) {
            # Extract comment lines just above to put them
            # in the new section
            my @comments;
            my $last_section = $sections[-1];
            while (@$last_section > 2 && $last_section->[-1] =~ /^#/) {
                unshift @comments, pop @$last_section;
            }

            # If the previous section was empty, drop it.
            pop @sections if @{$sections[-1]} == 2;
            # Begin the new section
            push @sections, [ Host => \@hosts_patterns, @comments ];
            $section_start = $n;
        }

        my @github_hosts_pat = grep { /\bgithub\.com$/ } @hosts_patterns;
        if (@github_hosts_pat) {
            unless ($in_ghkg) {
                warn sprintf "GitHub section outside github-keygen section in %s line %u\n",
                             compress_path(SSH_CONFIG_FILE), $n;
                # $dirty = 1;
            }
            #print map(+"[$_] ", @github_hosts_pat), "\n";
            # perl 5.10
            #%users = map { m/^((?!gist)[a-z_0-9]*+)(?:\.gist)?\.github.com$/ ? ($1 => undef) : () } @github_hosts_pat;
            # perl 5.8
            %users = map { m/^([a-z_0-9]+)(?:\.(?:gist|ssh|443))?\.github.com$/ && $_ ne 'gist.github.com' && $_ ne 'ssh.github.com' && $_ ne '443.github.com' ? ($1 => undef) : () } @github_hosts_pat;
            if (%users) {
                # Ignore users which are asked to be removed
                delete @users{keys %github_remove};
                if ($remove_all) {
                    $github_remove{$_} = 1 for keys %users;
                } elsif ($github_default eq '' && keys(%users) == 1 && grep { $_ eq 'github.com' } @github_hosts_pat) {
                    ($github_default) = keys %users;
                }
            }
        }
    } elsif (%users && $l =~ m/^\s*IdentityFile\s+(\S+)\s*/i) {
        if (keys %users > 1) {
            warn sprintf "multiple users detected in %s line %u\n",
                             compress_path(SSH_CONFIG_FILE), $section_start;
            $dirty = 1;
        } else {
            my $user = (keys %users)[0];
            if (exists $github_accounts{$user}) {
                $github_accounts{$user}{key_file} = resolve_path($1)
                    unless defined $github_accounts{$user}{key_file};
                push @github_accounts_from_config, $user;
            } elsif (! exists $github_remove{$user}) {
                my $key_file = resolve_path($1);
                warn sprintf "identity file %s for GitHub user %s doesn't exist\n",
                             compress_path($key_file), $user
                    unless -e $key_file;
                $github_accounts{$user} = {
                    # Create the user without 'key_type' so that the key is not
                    # created if it does not exist
                    # Rationale: the github-keygen user has not asked for this
                    # account
                    user => $user,
                    key_file => $key_file,
                };
                push @github_accounts_from_config, $user;
            }
        }
    } elsif ($in_ghkg && $l =~ /^# Version: ([0-9]+\.[0-9]*)/) {
        my $v = $1;
        if ($v > $VERSION) {
            if ($ENV{GITHUB_KEYGEN_DONWGRADE}) {
                warn sprintf "downgrading github-keygen section from v%s to v%s\n", $v, $VERSION;
            } else {
                die sprintf "%s has a github-keygen section of v%s. Can't downgrade to v%s!\n",
                    compress_path(SSH_CONFIG_FILE), $v, $VERSION;
            }
        }
    }
    # Append the line to the current section
    push @{$sections[-1]}, $l unless $in_ghkg;
}

# Pop the last section if it has no lines
pop @sections if @sections && @{$sections[-1]} == 2;

warn sprintf "failed to parse some parts of %s\n",
             compress_path(SSH_CONFIG_FILE) if $dirty;

@github_accounts = do {
    my %seen;
    (
        grep { !$seen{$_}++ }
             @github_accounts_from_config,
             @github_accounts
    )
};

undef @github_accounts_from_config;


print "Accounts: ", join(', ', @github_accounts), "\n" if @github_accounts;


my $errors = 0;

if (@github_accounts) {
    if (WIN32) {
        # Find ssh tools in msysgit
        require Config;
        my $pathsep = $Config::Config{path_sep};
        foreach my $p (split /\Q$pathsep\E/, $ENV{PATH}) {
            last if -e "$p\\ssh-keygen.exe";
            if (-e "$p\\Git.cmd" || -e "$p\\Git.exe") {
                $ENV{PATH} = "$p\\..\\bin$pathsep$ENV{PATH}";
                last;
            }
        }
    }
}

unless (-e SSH_DIR) {
    printf "Creating %s...\n", compress_path(SSH_DIR);
    mkdir SSH_DIR, 0700
        or die sprintf "can't create directory '%s': %s\n",
                compress_path(SSH_DIR), "$!";
}

foreach my $user (@github_accounts) {
    my $u = $github_accounts{$user};
    $u->{key_file} = ssh_file("id_$user\@github")
        unless defined $u->{key_file};

    next if -e $u->{key_file} || ! exists $u->{key_type};

    printf "Creating private key %s for user %s...\n",
           compress_path($u->{key_file}), $user;

    $u->{key_comment} //= hostname."/$user\@github.com";

    system 'ssh-keygen',
           '-t', delete $u->{key_type},
           '-b', delete $u->{key_bits},
           '-C', $u->{key_comment},
           defined $u->{passphrase} ? ('-N', $u->{passphrase}) : (),
           '-f', $u->{key_file};
    if ($? >> 8 || ! (-e $u->{key_file} && -e ($u->{key_file}.".pub"))) {
        $errors++;
        next;
    }

    # If an SSH Agent is available, give him the key
    # The $SSH_AGENT_PID check is to exclude gnome-keyring that does not
    # behave properly (it doesn't allow to remove keys)
    #
    # I'm not sure this is really useful, so disable it for now.
    #if ($ENV{SSH_AUTH_SOCK} && $ENV{SSH_AGENT_PID}) {
    #    print "Adding the key to the SSH agent for 20 minutes...\n";
    #    system qw< ssh-add -t 1200 >, $u->{key_file};
    #}

    $u->{created}++;
}

die "errors while creating key\n" if $errors;

$errors = 0;



if (@github_accounts) {

    # Map pubkey to GitHub account
    my %github_pubkeys;

    foreach my $user (@github_accounts) {
        last if $offline;
        if (open my $f, '-|', qw<curl -s -f>, "https://github.com/$user.keys") {
            my $rows;
            while (<$f>) {
                $rows++;
                chomp;
                s/^\S+ +(\S+).*/$1/;
                # print "$user pubkey on GitHub: $_\n";
                $github_pubkeys{"$user:$_"}++;
                push @{ $github_pubkeys{$_} ||= [] }, $user;
            }
            close $f;
            # TODO check $?
            if (!$rows) {
                # curl exit codes:
                # 6: Couldn't resolve host
                # 7: Failed to connect to host
                # 22: HTTP status >= 400 (see option -f)
                my $rc = $? >> 8;
                #printf "%d\n", $rc;
                if ($rc == 6 || $rc == 7) {
                    print "Offline mode: not checking key registration on GitHub.\n" if !defined $offline;
                    $offline++;
                }
            }
            $offline = 0 unless defined $offline;
        } else {
            warn("curl failed: exit code ".($?>>8)."\n");
        }
    }

    foreach my $user (@github_accounts) {
        my $u = $github_accounts{$user};
        my $pub_key_file = $u->{key_file} . ".pub";
        if (-e $pub_key_file) {
            if (open my $f, '-|', qw<ssh-keygen -l -f>, $pub_key_file) {
                chomp(my $fingerprint = <$f>);
                close $f;
                if ($fingerprint =~ m/^\S+ +(\S+)/) {
                    $u->{fingerprint} = $1;
                    #print "$user: $1\n";
                }
            }
            if (open my $f, '<', $pub_key_file) {
                chomp(my $line = <$f>);
                close $f;
                if ($line =~ m/^\S+ +(\S+) /) {
                    $u->{pubkey} = my $pub_key_b64 = $1;
                    #print "$user pubkey: $pub_key_b64\n";
                    unless ($offline) {
                        if (exists $github_pubkeys{"$user:$pub_key_b64"}) {
                            print "$user: key is registered on GitHub.\n";
                            $u->{key_on_github}++;
                        } elsif (!$u->{created}) {
                            # Check if a key is shared by multiple users
                            if (exists $github_pubkeys{$pub_key_b64}) {
                                warn "$user: key is already attached to user @{ $github_pubkeys{$pub_key_b64} } on GitHub!\n";
                                $u->{key_on_github}++;
                            } else {
                                warn "$user: key not registered on GitHub!\n";
                            }
                        }
                    }
                }
            }
        }
    }


    # To rebuild __DATA__ (if GitHub ever revokes its host keys):
    #   ssh-keyscan -t ed25519 github.com gist.github.com 2>/dev/null
    #   ssh-keyscan -t ed25519 -p 443 ssh.github.com 2>/dev/null

    my $size = -e KNOWN_HOSTS_FILE
             ? (stat KNOWN_HOSTS_FILE)[7]
             : 0;

    if ($size == 291) {
        printf "No changes in %s.\n",
               compress_path(KNOWN_HOSTS_FILE);
    } else {
        printf "Saving GitHub hosts authentication keys in %s...\n",
               compress_path(KNOWN_HOSTS_FILE);

        chmod 0600, KNOWN_HOSTS_FILE if $size;
        if (open my $f, '>', KNOWN_HOSTS_FILE) {
            # Read line by line (up to an empty line)
            # to convert EOL to the platform native EOL
            while (<DATA>) {
                last unless /../;
                print $f $_;
            }
            close $f;
        } else {
            warn sprintf "could not open %s: %s",
                         compress_path(KNOWN_HOSTS_FILE),
                         $!;
        }
    }
} elsif (-e KNOWN_HOSTS_FILE) {
    # No more GitHub account, so remove the hosts file
    printf "Removing %s...\n", compress_path(KNOWN_HOSTS_FILE);
    unlink KNOWN_HOSTS_FILE;
}

# Create the new config section
if (@github_accounts) {

    my $SSH_V = `ssh -V 2>&1`;
    # '6.6.1p1' => 0x6611
    # '4.6p1'   => 0x4601
    my $SSH_VERSION = do {
        my @V = $SSH_V =~ /^OpenSSH(?:[^0-9]*)_([0-9]+)\.([0-9]+)(?:\.([0-9]+))?p([0-9]+)/;
        ($V[0] << 12) | ($V[1] << 8) | (($V[2] || 0) << 4) | $V[3]
    };

    #printf "OpenSSH %04X\n", $SSH_VERSION;

    # Algorithms subset recommended by Stribika
    #  See https://stribika.github.io/2015/01/04/secure-secure-shell.html
    #  Last in each list is the minimum supported by GitHub
    #
    # TODO: Some algorithms are imported by OpenSSH from OpenSSL at runtime
    #       so we could check the output of `openssl list -cipher-algorithms`
    #       in the case `ssh -Q cipher` is not implemented (old OpenSSH).
    #       However:
    #       - this is less and less relevant as recent version of OpenSSH get
    #         deployed
    #       - we would have to parse various versions of the openssl tool output
    #         (`openssl list -cipher-algorithms` vs
    #         `openssl list-cipher-algorithms`: see
    #         tools/list-openssl-algorithms)
    my %algorithms = (
        # Ciphers: ssh -Q cipher
        cipher => [
            (qw< chacha20-poly1305@openssh.com >)
             x!! ($SSH_VERSION >= 0x5000),
            (qw< aes256-gcm@openssh.com aes128-gcm@openssh.com >)
             x!! ($SSH_VERSION >= 0x5000 && $^O ne 'msys'),
            'aes256-ctr',
        ],
        # MACs: ssh -Q mac
        mac => [ qw<
            hmac-sha2-512-etm@openssh.com
            hmac-sha2-256-etm@openssh.com
            umac-128-etm@openssh.com
            hmac-sha2-512
        > ],
        # KexAlgorithms: ssh -Q kex
        #
        # mlkem768x25519-sha256 is hybrid post-quantum, but
        # isn't yet supported by GitHub (2025-06-19).
        # We avoid NIST elliptic curves (ecdh-*-nistp*)
        kex => [ qw<
            mlkem768x25519-sha256
            curve25519-sha256
            curve25519-sha256@libssh.org
            diffie-hellman-group-exchange-sha256
        > ],
    );
    # Filter each list against what is supported by the ssh client
    while (my ($kind, $algos) = each %algorithms) {
        if ($SSH_VERSION > 0x5200 && open my $ssh_Q, '-|', "ssh -Q $kind 2>".File::Spec->devnull) {
            my %supported = map { chomp; ($_ => 1) } <$ssh_Q>;
            close $ssh_Q;
            if (%supported) {
                $algorithms{$kind} = join(',', grep { $supported{$_} } @$algos);
                next;
            }
            #warn "ssh -Q $kind: failure ($!)";
        }

        # For old OpenSSH that don't have -Q option:
        # - Detect supported cipher algorithms with 'ssh -c'
        # - Detect supported mac algorithms with 'ssh -m'
        my %kind2opt = (cipher => '-c', mac => '-m');
        if (my $opt = $kind2opt{$kind}) {
            for(my $i=0; $i<@$algos; $i++) {
                my $check = `ssh $opt $algos->[$i] -o XXX=xxx 2>&1`;
                # If the result is not "Unknown ...", the algorithm is
                # supported
                if (substr($check, 0, 7) eq 'Unknown') {
                    splice @$algos, $i, 1;
                    last if $i == @$algos;
                    redo
                }
            }
        }

        $algorithms{$kind} = @$algos ? join(',', @$algos) : '';
    }
    # hmac-sha1 is only for old OpenSSH that support none above
    $algorithms{'mac'} = 'hmac-sha1' unless length $algorithms{'mac'};

    my $known_hosts_file = compress_path KNOWN_HOSTS_FILE;

    # ControlMaster requires support for Unix sockets, so not Windows
    my $ControlMaster = WIN32 ? 'no' : 'auto';
    # Store ControlPath in XDG_RUNTIME_DIR
    my $ControlPath_dir = '~/.ssh';
    if (my $rt_dir = $ENV{XDG_RUNTIME_DIR}) {
        use filetest 'access'; # Stricter check, but _ can't be used
        if (-d $rt_dir && -x $rt_dir && -w $rt_dir) {
            $ControlPath_dir = $rt_dir;
        }
    }
    my $ControlPath =
        # Not sure about the exact version for %n support
        $SSH_VERSION >= 0x6000
        ? "$ControlPath_dir/conn-\%n"
        : "$ControlPath_dir/conn-github";

    my @ghkg_config_lines = map { "$_\n" } split /\n/, <<EOF, -1;
# -- github-keygen - begin --
# Version: $VERSION

Host gist.github.com *.gist.github.com
HostName gist.github.com

# See https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port
Host ssh.github.com *.ssh.github.com 443.github.com *.443.github.com
HostName ssh.github.com
Port 443

# This rule must stay below more specific host rules to avoid
# "HostName" to be set to github.com
Host *.github.com
HostName github.com

Host github.com gist.github.com ssh.github.com 443.github.com *.github.com *.gist.github.com *.ssh.github.com *.443.github.com
User git
# Known options which are available only in some OpenSSH versions
IgnoreUnknown Protocol,UseRoaming,UseKeychain
# Force SSH2
Protocol 2
# Enforce host checks
StrictHostKeyChecking yes
UserKnownHostsFile ${known_hosts_file}
# Hosts added later (identified by IP) will be hashed
HashKnownHosts yes
# GitHub has not yet (2011-05) implemented SSHFP (RFC 4255)
VerifyHostKeyDNS no
# Enable only the required authentication
PubkeyAuthentication yes
PreferredAuthentications publickey
# Selection of the best algorithms supported by GitHub now or ready for the future (PQ).
# Check: ssh -vvv dolmen.github.com 2>&1 | grep -A1 'server KEXINIT'
# Last in each list is the minimum supported by GitHub.
KexAlgorithms $algorithms{kex}
Ciphers $algorithms{cipher}
MACs $algorithms{mac}
# Disallow server key using SHA-1
# https://www.openssh.com/txt/release-8.2
HostKeyAlgorithms -ssh-rsa
# Trust no one, especially the remote
ForwardAgent no
ForwardX11 no
PermitLocalCommand no
# Never request a TTY (OpenSSH 5.9), like -T
RequestTTY no
UseRoaming no
# Connection sharing for 60 seconds, for speedup (disabled on Windows)
ControlMaster ${ControlMaster}
ControlPath ${ControlPath}
ControlPersist 60s
EOF

    foreach my $u (@github_accounts) {
        push @ghkg_config_lines,
            join(' ',
                'Host',
                (map { "$u.$_" } GITHUB_HOSTS),
                ($u eq $github_default ? (GITHUB_HOSTS) : ()),
            ) . "\n",
            "IdentitiesOnly yes\n",
            'IdentityFile '. compress_path($github_accounts{$u}->{key_file}) . "\n",
            "\n";
    }

    # Close the section
    push @ghkg_config_lines, "# -- github-keygen - end --\n";


    # Check against the man page that all the options we plan to use are supported
    # on this machine
    my $manfile;
    if (-x '/usr/bin/man' && ($manfile = qx{man -w ssh_config 2>/dev/null})) {
        chomp $manfile;
    } else {
        # On msysgit the man page is installed despites /usr/bin/man isn't
        foreach ('', '.gz') {
            my $f = "/usr/share/man/man5/ssh_config.5$_";
            if (-f $f) {
                $manfile = $f;
                last;
            }
        }
    }
    if ($manfile) {
        #print "ssh_config.5: $manfile\n";
        my $fh;
        if ($manfile =~ /\.gz$/) {
            open $fh, '-|', "zgrep '\\.It Cm' '$manfile'";
        } else {
            open $fh, '<', $manfile;
        }
        if ($fh) {
            my %supported_options;
            # UseRoaming was an undocumented option that is a security issue
            # if enabled when connecting to a malicious server.
            # http://www.openssh.com/txt/release-7.1p2
            # Special case for MacOS X Sierra that has 7.2p2 but no
            # UseRoaming: https://github.com/dolmen/github-keygen/issues/31
            $supported_options{useroaming} =
                $SSH_VERSION >= 0x5400
                && $SSH_VERSION < ($^O eq 'darwin' ? 0x7200 : 0x7300);
            # SSH protocol v1 removed in OpenSSH 7.6
            # https://www.openssh.com/txt/release-7.6
            $supported_options{protocol} =
                $SSH_VERSION < 0x7600;
            # We have to lower case the option names because the case in the
            # manual has not been conistent in OpenSSH history.
            while (<$fh>) {
                $supported_options{lc $1}++ if /^\.It Cm ([A-Z]\S+)/
            }
            close $fh;
            if (scalar(keys %supported_options) > 1) {
                foreach (@ghkg_config_lines) {
                    next unless /^([A-Z]\S+)/;
                    my $sup = $supported_options{lc $1};
                    unless ($sup) {
                        warn "ssh option '$1' is not available" if !defined $sup;
                        s/^/##/;
                    }
                }
            }
        }
    }

    # OpenSSH 6.6.1p1 from msys:
    # msys does not support passing file descriptors and ControlMaster relies
    # on that, so we comment all Control options
    # OpenSSH_for_Windows_9.5p1:
    # doesn't support Unix sockets ("getsockname failed: Not a socket").
    if (WIN32) {
        s/^(ControlP(?:ath|ersist) )/##$1/ for @ghkg_config_lines;
    }
    # OpenSSH 4.6p1 from msysgit: keep the poor algorithms list
    if ($SSH_VERSION < 0x5000) {
        s/^(KexAlgorithms|MACs|Control(?:Persist|Path)) /##$1 / for @ghkg_config_lines;
    }
    # Option UseRoaming appeared in 5.4 (but undocumented), is deprecated in 7.2 and
    # removed in 7.3
    if ($SSH_VERSION >= 0x7300) {
        # option is deprecated in 7.2, but removed in 7.3
        @ghkg_config_lines = grep !/^UseRoaming /, @ghkg_config_lines;
    }
    if ($SSH_VERSION < 0x5400) {
        s/^(UseRoaming )/##$1/ for @ghkg_config_lines;
    }

    # If no GHKG section existed, add it at the end of the file
    $ghkg_section_pos = scalar @sections unless defined $ghkg_section_pos;

    # But if the last section of the file is "Host *" (default settings for
    # all hosts), we want to be just before
    if ($ghkg_section_pos > 0 && $ghkg_section_pos == @sections) {
        $ghkg_section_pos--
            if $sections[-1][0] eq 'Host' && grep $_ eq '*', @{$sections[-1][1]}
    }

    # If not the last section, append "\n"
    push @ghkg_config_lines, "\n" if $ghkg_section_pos <= @sections;

    # Inject our section
    splice @sections, $ghkg_section_pos, 0, [ '', '', @ghkg_config_lines ]
}


# If we either deleted or created a GHKG section,
# rebuild the file content from @sections
if (defined $ghkg_section_pos) {
    undef @ssh_config_lines;
    while (my $s = shift @sections) {
        splice @$s, 0, 2;
        push @ssh_config_lines, @$s;
    }
}



# Workaround for perl 5.8
# (smartmatch is at least good at easily comparing arrays)
sub array_equals (\@\@)
{
    my ($a1, $a2) = @_;
    return '' if $#$a1 != $#$a2;
    for(my $i=$#$a1; $i>=0; $i--) {
        return '' if $a1->[$i] ne $a2->[$i]
    }
    return 1
}

if (@ssh_config_lines) {
    #if (@ssh_config_lines ~~ @ssh_config_lines_orig) {   # perl 5.10
    if (array_equals @ssh_config_lines, @ssh_config_lines_orig) {
        printf "No changes in %s.\n", compress_path(SSH_CONFIG_FILE);
    # :crlf layer is needed explicitely on msys
    } elsif (open my $f, WIN32 ? '>:crlf' : '>', SSH_CONFIG_FILE) {
        printf "Saving %s...\n", compress_path(SSH_CONFIG_FILE);
        print Text::Diff::diff(\@ssh_config_lines_orig, \@ssh_config_lines, { STYLE => 'Unified' }) if HAS_TEXT_DIFF;
        print $f @ssh_config_lines;
        close $f;
        print "Done.\n";
    } else {
    }
} else {
    if (-e SSH_CONFIG_FILE) {
        printf "Removing %s...\n", compress_path(SSH_CONFIG_FILE);
        print Text::Diff::diff(\@ssh_config_lines_orig, \@ssh_config_lines, { STYLE => 'Unified' }) if HAS_TEXT_DIFF;
        unlink SSH_CONFIG_FILE
            or warn sprintf("can't remove %s: %s\n",
                            SSH_CONFIG_FILE, $!);
        print "Done.\n";
    }
}

my @unregistered_users =
    grep {
        my $u = $github_accounts{$_};
        $u->{created} || (!$offline && !$u->{key_on_github})
    } @github_accounts;

if (@unregistered_users) {

    my @clip_cmd;

    # X11
    @clip_cmd = qw</usr/bin/xclip -selection clipboard>
        if exists $ENV{DISPLAY} && -x '/usr/bin/xclip';

    # Darwin
    @clip_cmd = qw</usr/bin/pbcopy> if -x '/usr/bin/pbcopy';

    if (@clip_cmd && @unregistered_users == 1 && !$offline) {
        my $user = shift @unregistered_users;
        # Copy the first key created to the clipboard
        my $pub_key_file = $github_accounts{$user}->{key_file}.".pub";
        # Read the public key from the file
        open my $pub, '<', $pub_key_file;
        my $pubkey = <$pub>;
        $pubkey =~ s/^(\S+ \S+).*/$1/;
        close $pub;

        open my $clip, '|-', @clip_cmd;
        print $clip $pubkey;
        close $clip;
        printf "\n"
             . "The public key %s for $user has been copied to the clipboard.\n"
             . "Paste it in your SSH settings at <https://github.com/settings/keys>.\n",
               compress_path($pub_key_file);
    } else {
        print "\n"
            . "You now have to copy the public key for each user to your SSH settings at\n"
            . "<https://github.com/settings/keys>.\n";
        # Help the user to copy the other keys
        foreach my $user (@unregistered_users) {
            my $pub_key = compress_path($github_accounts{$user}{key_file}).".pub";
            if (@clip_cmd) {
                print "  $user:  @clip_cmd < $pub_key\n";
            } else {
                print "  $user:  $pub_key\n";
            }
        }
        if ($offline) {
            print "Then run github-keygen online to check the registration works.\n";
        } else {
            print "Then re-run github-keygen to check the registration works.\n";
        }
    }
}

__END__
github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
gist.github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
[ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

=head1 NAME

github-keygen - GitHub SSH setup tool

=head1 SYNOPSIS

    # Get github-keygen
    git clone https://github.com/dolmen/github-keygen

    # Manage SSH keys
    github-keygen [-R]      [-t <key-type>] [-b <key-bits>]
                  [ <user1> [-t <key-type>] [-b <key-bits>] [-d] [-r]
                    [ <user2> ... ] ]

    # Use an account
    git clone <user>.github.com:<repo-owner>/<repo>

=head1 DESCRIPTION

This script ease initial environment setup for secure GitHub exchanges, but it
does much more than that:

=over 4

=item *

Create a new SSH private key

=item *

Setup a very secure SSH configuration for GitHub, independent of your other SSH
settings:

=over 4

=item -

Enable only the authentication method used with GitHub (publickey)

=item -

Disable bad things that could come from the GitHub hosts ("Trust no-one")

=back

=item *

Create unique host aliases for github.com/gist.github.com that you'll be able
to use in Git URLs to connect to a particular account. This gives uses the
flexibility to use multiple GitHub accounts.

    <account>.github.com:<repo-owner>/<repo>.git
    github.com:<repo-owner>/<repo>.git

in addition to:

    git@github.com:<repo-owner>/<repo>.git

=back

This script will:

=over 4

=item *

Create a new SSH key dedicated only to your GitHub connections in
F<~/.ssh/id_I<E<lt>github-accountE<gt>>@github>

=item *

Create the SSH configuration optimized for GitHub and dedicated to GitHub
(do not impact your other SSH configurations) in F<~/.ssh/config> (unless the
file already exists)

=item *

Install the GitHub SSH host authentication fingerprints in
F<~/.ssh/known_hosts_github>

=back

=head1 OPTIONS

=head2 GLOBAL OPTIONS

Global options are given just after the command name, and before the first
account name.

=over 4

=item -R

Remove all accounts, except those following on the command-line.

=item -t I<key-type>

Set default key type for key creation. Default is C<ed25519>.

=item -b I<key-bits>

Set default key bits for key creation. Default is C<4096>.

=back

=head2 ACCOUNT OPTIONS

Account options are given after each account name.

=over 4

=item -d

Set this account as the default for C<github.com>/C<gist.github.com> (when you
do not use a host alias).

=item -r

Remove the account from F<~/.ssh/config>. The private key will be kept, but not
referenced anymore in F<~/.ssh/config>.

=item -i I<key-file>

The key is created only if it doesn't already exists.

If only a filename is given, it will be relative to F<~/.ssh/>, else if a
relative path is given it will be relative to the current directory. Absolute
paths are kept as is.

=back

Key creations parameters (see L<ssh-keygen(1)>):

=over 4

=item -t I<key-type>

=item -b I<key-bits>

=item -p I<passphrase>

=item -C I<comment>

Default comment is C<I<hostname>/I<account>@github.com>.

=item -i I<key-file>

Default is F<~/.ssh/id_I<account>@github.com>.

=back

=head1 EXAMPLES

    # Remove all previous gihub-keygen config
    github-keygen -R

    # Add a GitHub account
    github-keygen account1

    # Add an other GitHub account
    github-keygen account2

    # Add a third GitHub account with key file
    github-keygen account3 -i ./id_account3

    # Remove account2
    github-keygen account2 -r

    # Clone repo 'user2/project1' with account3
    git clone account3.github.com:user2/project1.git
    cd project1

    # Add a remote for pushing with account2
    git remote add gh-account2 account2.github.com:user2/project1.git

    # Remove all except account3
    github-keygen -R account3

    # Uninstall
    github-keygen -R

=head1 SEE ALSO

=over 4

=item *

L<ssh-keygen(1)>

=item *

L<ssh_config(5)>

=item *

L<https://docs.github.com/en/get-started/quickstart/set-up-git#platform-linux>

=item *

L<https://docs.github.com/en/authentication>

=item *

L<https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases>

=back

=head1 AUTHOR

Olivier MenguE<eacute>, L<mailto:dolmen@cpan.org>.

=head1 COPYRIGHT & LICENSE

Copyright E<copy> 2011-2025 Olivier MenguE<eacute>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<https://www.gnu.org/licenses/>.

=cut

# vim: set et sw=4 sts=4:
